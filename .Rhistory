layOut(list(plota, 1, 1:3),
list(plotb, 1, 4:5),
list(plotc, 2, 1:5))
?layOut
11+12
11/23
?chi.sq
?chisq.test
head(df)
names(df)
str(df$value)
df$value <- factor(df$value)
str(df$value)
levels(df$value)
chisq.test(df$value, df$stereotyped)
table(df$value, df$stereotyped)
table(df$value[df$interventcond == 'group', ], df$stereotyped[df$interventcond == 'group', ])
df$interventcond[1:5]
table(df$interventcond=='group')
table(df$value[df$interventcond=='group',])
table(df[df$interventcond=='group',df$value])
with(df[df$interventcond=='group'], table(df$value))
table(df$value[which(df$interventcond=='group'),])
table(df$interventcond)
table(df$value)
df[df$interventcond=='group', df$value]
df[which(df$interventcond=='group'), 263]
df[which(df$interventcond=='group'), 'value']
table(df[which(df$interventcond=='group'), 'value'], df[which(df$interventcond=='group'), 'stereotyped'])
chisq.test(table(df[which(df$interventcond=='group'), 'value'], df[which(df$interventcond=='group'), 'stereotyped']))
chisq.test(df$value, df$stereotyped)
table(df[which(df$interventcond=='group'), 'value'], df[which(df$interventcond=='group'), 'stereotyped'])
names(df)
head(df$test1numCorrectofAnswer)
?melt
df.melt <- melt(df, id.vars = c('subjectnum', 'interventcond', 'stereotyped'), measure.vars=c('test1numCorrectofAnswer', 'test2numCorrectofAnswer', 'test3numCorrectofAnswer'))
library(reshape2)
df.melt <- melt(df, id.vars = c('subjectnum', 'interventcond', 'stereotyped'), measure.vars=c('test1numCorrectofAnswer', 'test2numCorrectofAnswer', 'test3numCorrectofAnswer'))
head(df.melt)
df.melt$variable <- gsub(df.melt$variable, 'numCorrectofAnswer', '')
df.melt$variable <- gsub(df.melt$variable, 'numCorrectofAnswer', '')
df.melt
df.melt$variable <- gsub('numCorrectofAnswer', '', df.melt$variable)
head(df.melt)
df.melt <- melt(df, id.vars = c('subjectnum', 'interventcond', 'stereotyped'), measure.vars=c('test1numCorrectofAnswer', 'test2numCorrectofAnswer', 'test3numCorrectofAnswer'))
?grep
levels(df.melt$variable)
df.melt$variable <- factor(df.melt$variable, levels=c('test1', 'test2', 'test3'))
levels(df.melt$variable)
hist(df.melt$value)
plot<-ggplot(df.melt, aes(x=variable, y=value, aes=interventcond))
plot+geom_line()+
facet_wrap(~stereotyped)
df.melt <- melt(df, id.vars = c('subjectnum', 'interventcond', 'stereotyped'), measure.vars=c('test1numCorrectofAnswer', 'test2numCorrectofAnswer', 'test3numCorrectofAnswer'))
df.melt$variable <- factor(df.melt$variable, levels=c('test1', 'test2', 'test3'))
plot<-ggplot(df.melt, aes(x=variable, y=value, aes=interventcond))
plot+geom_line()+
facet_wrap(~stereotyped)
df.melt$variable
df.melt <- melt(df, id.vars = c('subjectnum', 'interventcond', 'stereotyped'), measure.vars=c('test1numCorrectofAnswer', 'test2numCorrectofAnswer', 'test3numCorrectofAnswer'))
head(df.melt)
df.melt$variable <- factor(df.melt$variable, levels=c('test1', 'test2', 'test3'))
head(df.melt)
df.melt <- melt(df, id.vars = c('subjectnum', 'interventcond', 'stereotyped'), measure.vars=c('test1numCorrectofAnswer', 'test2numCorrectofAnswer', 'test3numCorrectofAnswer'))
str(df.melt$variable)
df.melt$variable <- factor(df.melt$variable, levels=c('test1', 'test2', 'test3'))
str(df.melt$variable)
df.melt$variable <- factor(df.melt$variable)
df.melt <- melt(df, id.vars = c('subjectnum', 'interventcond', 'stereotyped'), measure.vars=c('test1numCorrectofAnswer', 'test2numCorrectofAnswer', 'test3numCorrectofAnswer'))
df.melt$variable <- factor(df.melt$variable)
str(df.melt$variable)
levels(df.melt$variable) <- c('test1', 'test2', 'test3')
str(df.melt$variable)
plot<-ggplot(df.melt, aes(x=variable, y=value, aes=interventcond))
plot+geom_line()+
facet_wrap(~stereotyped)
plot<-ggplot(df.melt, aes(x=variable, y=value, group=interventcond))
plot+geom_line()+
facet_wrap(~stereotyped)
plot<-ggplot(df.melt, aes(x=variable, y=value, group=interventcond))
plot+stat_smooth(method='glm')+
facet_wrap(~stereotyped)
plot<-ggplot(df.melt, aes(x=variable, y=value, group=interventcond, color=interventcond))
plot+stat_smooth(method='glm')+
facet_wrap(~stereotyped)
plot<-ggplot(!is.na(df.melt), aes(x=variable, y=value, group=interventcond, color=interventcond))
plot+stat_smooth(method='glm')+
plot<-ggplot(df.melt[which(df$interventcond != NA),], aes(x=variable, y=value, group=interventcond, color=interventcond))
plot<-ggplot(df.melt[which(df.melt$stereotyped != NA),], aes(x=variable, y=value, group=interventcond, color=interventcond))
plot+stat_smooth(method='glm')+
facet_wrap(~stereotyped)
plot<-ggplot(subset(df.melt$stereotyped != NA), aes(x=variable, y=value, group=interventcond, color=interventcond))
plot<-ggplot(subset(df.melt, df.melt$stereotyped != NA), aes(x=variable, y=value, group=interventcond, color=interventcond))
plot+stat_smooth(method='glm')+
facet_wrap(~stereotyped)
plot<-ggplot(subset(df.melt, df.melt$stereotyped == NA), aes(x=variable, y=value, group=interventcond, color=interventcond))
plot+stat_smooth(method='glm')+
facet_wrap(~stereotyped)
plot<-ggplotna.omit(df.melt), aes(x=variable, y=value, group=interventcond, color=interventcond))
plot<-ggplot(na.omit(df.melt), aes(x=variable, y=value, group=interventcond, color=interventcond))
plot+stat_smooth(method='glm')+
facet_wrap(~stereotyped)
?update
?lmer
library(lme4)
?lmer
head(df.melt$variable-1)
head(df.melt)
fm1 <- lmer(value ~ variable + (variable | subjectnum))
fm1 <- lmer(value ~ variable + (variable | subjectnum), df.melt)
table(subjectnum)
table(df.meltsubjectnum)
table(df.melt$subjectnum)
table#df.melt$variable
table(df.melt$variable)
table(df.melt$stereotyped)
fm1 <- lmer(value ~ variable + (variable | factor(subjectnum)), df.melt)
df.melt$subjectnum <- factor(df.melt$subjectnum)
fm1 <- lmer(value ~ variable + (variable | subjectnum), df.melt)
str(df.melt$subjectnum)
fm1 <- lmer(value ~ variable + (1 | subjectnum), df.melt)
head(df.melt)
fm2 <- update(fm1 .~. + interventcond)
fm2 <- update(fm1, .~. + interventcond)
fm3 <- update(fm2, .~. + stereotyped)
anova(fm1, fm2)
anova(fm1, fm3)
anova(fm2, fm3)
anova(fm1, fm3)
fm4 <- update(fm3, .~variable*interventcond*stereotyped)
fm4 <- update(fm3, .~variable*interventcond*stereotyped + (1 | subjectnum))
anova(fm3, fm4)
fm5 <- lm(value ~ variable + interventcond + stereotyped, data=df.melt)
fm5
summary(fm5)
fm5
names(fm5)
fm5$contrasts
fm5$effects
summary(fm5)
df.melt$testnum <- as.numeric(df.melt$variable)
table(df.melt$testnum, df.melt$variable)
df.melt$subjectnum <- factor(df.melt$subjectnum)-1
df.melt$testnum <- as.numeric(df.melt$variable)-1
table(df.melt$testnum, df.melt$variable)
df.melt$testnum <- as.numeric(df.melt$variable)
fm5 <- lm(value ~ testnum + interventcond + stereotyped, data=df.melt)
fm5
summary(fm5)
fm1 <- lmer(value ~ testnum +  (testnum | subjectnum), df.melt)
df.melt$subjectnum <- factor(df.melt$subjectnum)
fm1 <- lmer(value ~ testnum +  (testnum | subjectnum), df.melt)
fm1 <- lmer(value ~ testnum +  (testnum | subjectnum), df.melt)
df.melt$subjectnum <- factor(df.melt$subjectnum)
fm1 <- lmer(value ~ testnum +  (testnum | subjectnum), df.melt)
fm1 <- lmer(value ~ testnum + (testnum | subjectnum), df.melt)
fm1 <- lmer(value ~ testnum + (testnum|subjectnum), df.melt)
fm5 <- lm(value ~ testnum + interventcond + stereotyped, data=df.melt)
fm5
summary(fm5)
fm1 <- lmer(value ~ testnum-1 + (testnum-1|subjectnum), df.melt)
fm1 <- lmer(value ~ testnum + (1|subjectnum), df.melt)
df.melt$subjectnum <- factor(df.melt$subjectnum)
fm1 <- lmer(value ~ testnum + (1|subjectnum), df.melt)
str(subjectnum)
str(df.melt$subjectnum)
df.melt <- melt(df, id.vars = c('subjectnum', 'interventcond', 'stereotyped'), measure.vars=c('test1numCorrectofAnswer', 'test2numCorrectofAnswer', 'test3numCorrectofAnswer'))
levels(df.melt$variable) <- c('test1', 'test2', 'test3')
df.melt$testnum <- as.numeric(df.melt$variable)
df.melt$subjectnum <- factor(df.melt$subjectnum)
fm1 <- lmer(value ~ testnum + (testnum|subjectnum), df.melt)
fm1
plot<-ggplot(na.omit(df.melt), aes(x=variable, y=value, group=subjectnum, color=subjectnum))
plot+geom_line()+
facet_wrap(~stereotyped)
plot<-ggplot(na.omit(df.melt), aes(x=variable, y=value, group=subjectnum, color=interventcond))
plot+geom_line()+
facet_wrap(~stereotyped)
plot<-ggplot(na.omit(df.melt), aes(x=variable, y=value, group=subjectnum))
plot+geom_line()+
facet_wrap(interventcond~stereotyped)
plot<-ggplot(na.omit(df.melt), aes(x=variable, y=value, group=subjectnum))
plot+geom_line()+
facet_grid(interventcond~stereotyped)
fullmodel <- lmer(value ~ testnum*steretyped*interventcond + (testnum|subjectnum), df.melt)
fullmodel <- lmer(value ~ testnum*stereotyped*interventcond + (testnum|subjectnum), df.melt)
fm2 <- update(fmullmodel, .~ testnum*stereotyped + testnum*interventcond + (testnum|subjectnum), df.melt)
fm2 <- update(fullmodel, .~ testnum*stereotyped + testnum*interventcond + (testnum|subjectnum), df.melt)
anova(fullmodel, fm2)
fm4 <- update(fullmodel, .~ testnum + stereotyped + interventcond (testnum | subjectnum), df.melt)
fm4 <- update(fullmodel, .~ testnum + stereotyped + interventcond + (testnum | subjectnum), df.melt)
anova(fullmodel, fm4)
plot(fullmodel)
plot(fm2)
plot(fm3)
plot(fm4)
plot(fm5)
fm4 <- update(fullmodel, .~ testnum + stereotyped + interventcond + (testnum | subjectnum), df.melt)
plot(fm4)
plot(fullmodel)
fullmodel
summary(fullmodel)
MCMCglmm(fullmodel)
mcmcsamp(fullmodel)
library(mcmcglmm)
library('mcmcglmm')
library('MCMCglmm')
install.packages('MCMCglmm')
?MCMCglmm
library(MCMCglmm)
MCMCglmm(fullmodel)
lme4
?lme4
version(lme4)
version()
r.version()
bootmer(fullmodel)
bootMer(fullmodel)
fun <- function(fit){return(fixef(fit))}
bootMer(fullmodel, fun)
help("simulate-mer")
?simulate-mer
?simulatemer
a<-bootMer(fullmodel, fun, sim=1000)
a<-bootMer(fullmodel, fun, nsim = 1000)
summary(a)
names(a)
a[1]
a[2]
summary(a[2])
hist(a[2])
hist(a[2]$t)
hist(a[3])
summary(a[3])
5/6
16/18
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/Documents/Gits/StatsWorkshop")
source('~/.active-rstudio-document', echo=TRUE)
plotVenn3d.novals <- function (x, labels = c("A", "B", "C"), Colors = c("red", "yellow",
"orange", "lightblue", "purple", "green", "grey"), Title = NULL,
shrink = 1, rot = 0, printvals=TRUE)
{
getArcEnds <- function(center1, center2, radius) {
calcdist <- function(x, y) sqrt((x[1] - y[1])^2 + (x[2] -
y[2])^2)
calcangle <- function(x, y) atan((y[2] - x[2])/(y[1] -
x[1]))
centerDistance <- calcdist(center1, center2)
connector <- ifelse(center1[1] > center2[1], pi, 0) +
calcangle(center1, center2)
intersection <- acos((centerDistance/2)/radius)
c(begin = connector - intersection, end = connector +
intersection)
}
arcPoints <- function(beginpt, endpt, center, radius) {
angles <- seq(beginpt, endpt, length = nfacets)
x <- center[1] + radius * cos(angles)
y <- center[2] + radius * sin(angles)
list(x = x, y = y)
}
getArc <- function(center1, center2, radius) {
ends <- getArcEnds(center1, center2, radius)
arcPoints(ends["begin"], ends["end"], center1, radius)
}
twoWayOverlap <- function(center1, center2, radius, color) {
points1 <- getArc(center1, center2, radius)
points2 <- getArc(center2, center1, radius)
points <- list()
points$x <- c(points1$x, points2$x)
points$y <- c(points1$y, points2$y)
grid.polygon(x = points$x, y = points$y, gp = gpar(fill = color))
}
centralArcs <- function(centers, i, radius) {
if (i == 1) {
j <- 2
k <- 3
}
if (i == 2) {
j <- 1
k <- 3
}
if (i == 3) {
j <- 2
k <- 1
}
endsone <- getArcEnds(centers[[i]], centers[[j]], radius)
endstwo <- getArcEnds(centers[[i]], centers[[k]], radius)
if (endsone[2] < 0)
endsone <- endsone + 2 * pi
if (endstwo[2] < 0)
endstwo <- endstwo + 2 * pi
if (endstwo[1] < endsone[1] & endsone[1] < endstwo[2]) {
return(arcPoints(endsone[1], endstwo[2], centers[[i]],
radius))
}
else {
return(arcPoints(endstwo[1], endsone[2], centers[[i]],
radius))
}
}
fromBase2 <- function(x) 4 * as.numeric(substr(x, 1, 1)) +
2 * as.numeric(substr(x, 2, 2)) + as.numeric(substr(x,
3, 3))
rotateCoordinates <- function(xy, tiltpi) {
if (is.null(nrow(xy)))
adjustCenter <- plotCenter
else adjustCenter <- matrix(rep(plotCenter, nrow(xy)),
byrow = TRUE, nrow = nrow(xy))
rotationMatrix <- matrix(c(cos(tiltpi), -sin(tiltpi),
sin(tiltpi), cos(tiltpi)), byrow = TRUE, ncol = 2)
(xy - adjustCenter) %*% rotationMatrix + adjustCenter
}
rot <- rot%%360
tiltpi <- rot * pi/180
if (missing(x))
x <- paste(seq(15), Colors)
values <- rep(0, length(x))
if (is.null(names(x)))
names(x) <- c("101", "110", "010", "001", "011", "100",
"111")[seq(length(x))]
valptr <- unlist(lapply(names(x), fromBase2))
inputColors <- Colors
for (i in seq_along(x)) if (valptr[i] %in% 1:7) {
values[valptr[i]] <- values[valptr[i]] + x[i]
Colors[valptr[i]] <- inputColors[i]
}
nfacets <- 300
radius <- 0.25
r0 <- 0.18
dy <- r0 * sin(pi/6)
dx <- r0 * cos(pi/6)
labx0 <- 0.29
labx1 <- 1.5
labx2 <- 0.75
plotCenter <- c(0.5, ifelse(is.null(Title), 0.5, 0.43))
centers <- list(c(plotCenter[1], plotCenter[2] + r0), c(plotCenter[1] -
dx, plotCenter[2] - dy), c(plotCenter[1] + dx, plotCenter[2] -
dy))
angle <- seq(0, 2 * pi, length = nfacets)[-nfacets]
points1 <- centralArcs(centers, 1, radius)
points2 <- centralArcs(centers, 2, radius)
points3 <- centralArcs(centers, 3, radius)
points <- list()
points$x <- c(points1$x, points2$x, points3$x)
points$y <- c(points1$y, points2$y, points3$y)
if (tiltpi != 0) {
pointsxy <- rotateCoordinates(cbind(points$x, points$y),
tiltpi)
points$x <- pointsxy[, 1]
points$y <- pointsxy[, 2]
centers <- sapply(centers, function(x) list(rotateCoordinates(x,
tiltpi)))
}
labelLocations <- rotateCoordinates(matrix(c(plotCenter[1],
plotCenter[2] + r0 + labx0, plotCenter[1] - dx, plotCenter[2] -
dy - labx0, plotCenter[1] + dx, plotCenter[2] - dy -
labx0), byrow = TRUE, ncol = 2), tiltpi)
centerLocations <- rotateCoordinates(matrix(c(plotCenter[1] +
dx * labx1, plotCenter[2] - dy * labx1, plotCenter[1] -
dx * labx1, plotCenter[2] - dy * labx1, plotCenter[1],
plotCenter[2] - r0 * labx2, plotCenter[1], plotCenter[2] +
r0 * labx1, plotCenter[1] + dx * labx2, plotCenter[2] +
dy * labx2, plotCenter[1] - dx * labx2, plotCenter[2] +
dy * labx2, plotCenter[1], plotCenter[2]), byrow = TRUE,
ncol = 2), tiltpi)
if (!is.null(Title))
grid.text(Title, gp = gpar(fontsize = 25 * shrink, fontface = "bold"),
x = plotCenter[1], y = 0.97)
grid.polygon(x = centers[[1]][1] + radius * cos(angle), y = centers[[1]][2] +
radius * sin(angle), gp = gpar(fill = Colors[4]))
grid.polygon(x = centers[[2]][1] + radius * cos(angle), y = centers[[2]][2] +
radius * sin(angle), gp = gpar(fill = Colors[2]))
grid.polygon(x = centers[[3]][1] + radius * cos(angle), y = centers[[3]][2] +
radius * sin(angle), gp = gpar(fill = Colors[1]))
twoWayOverlap(centers[[1]], centers[[2]], radius, Colors[6])
twoWayOverlap(centers[[2]], centers[[3]], radius, Colors[3])
twoWayOverlap(centers[[1]], centers[[3]], radius, Colors[5])
grid.polygon(x = points$x, y = points$y, gp = gpar(fill = Colors[7]))
for (i in 1:3) grid.text(labels[i], labelLocations[i, 1],
labelLocations[i, 2], gp = gpar(fontsize = 18 * shrink,
fontface = "bold"))
if(isTRUE(printvals)){
for (i in 1:7) grid.text(values[i], centerLocations[i, 1],
centerLocations[i, 2])
}
}
plotVenn3d.novals(10, 10, 10, 10, 10, 10, 10)
library(plotVenn)
library(VennDiagram)
plotVenn3d.novals(10, 10, 10, 10, 10, 10, 10)
grid.clear()
grid.newpage()
plotVenn3d.novals(10, 10, 10, 10, 10, 10, 10)
plotVenn3d.novals(10, 10, 10, 10, 10, 10, 10, labels=c('Attitude', 'Prime', 'Attitude*Prime'))
plotVenn3d.novals(10, 10, 10, 10, 10, 10, 10, category=c('Attitude', 'Prime', 'Attitude*Prime'))
plotVenn(c(10, 10, 10, 10, 5, 1, 57), labels = c('Prime', 'Attitude', 'Prime*Attitude'), Colors = c('red', 'blue', 'orange', 'purple', 'green', 'grey', 'white'))
library(colorfulVennPlot)
plotVenn(c(10, 10, 10, 10, 5, 1, 57), labels = c('Prime', 'Attitude', 'Prime*Attitude'), Colors = c('red', 'blue', 'orange', 'purple', 'green', 'grey', 'white'))
grid.newpage()
plotVenn3d.novals(c(10, 10, 10, 10, 5, 1, 57), labels = c('Prime', 'Attitude', 'Prime*Attitude'), Colors = c('red', 'blue', 'orange', 'purple', 'green', 'grey', 'white'), printvals=F)
plotVenn3d.novals(c(10, 10, 10, 10, 5, 1, 57), labels = c('Prime*Attitude', 'Attitude', 'Prime'), Colors = c('White', 'White', 'White', 'white', 'white', 'white', 'white'), printvals=F)
grid.newpage()
rm(plotVenn3d.novals)
source('..//modified venn.r')
plotVenn3d.novals(c(10, 10, 10, 10, 5, 1, 57),
labels = c('Prime*Attitude', 'Attitude', 'Prime'),
Colors = c('Red', rep('White', 6)), printvals=F)
plotVenn3d.novals(c(10, 10, 10, 10, 5, 1, 57),
labels = c('Prime*Attitude', 'Attitude', 'Prime'),
Colors = c(rep('Red', 2), rep('White', 5)), printvals=F)
grid.newpage()
plotVenn3d.novals(c(10, 10, 10, 10, 5, 1, 57),
labels = c('Prime*Attitude', 'Attitude', 'Prime'),
Colors = c('Red', 'White', 'Red', rep('White', 4)), printvals=F)
grid.newpage()
plotVenn3d.novals(c(10, 10, 10, 10, 5, 1, 57),
labels = c('Prime*Attitude', 'Attitude', 'Prime'),
Colors = c('Red', rep('White', 2), 'Red', rep('White', 3) ), printvals=F)
grid.newpage()
plotVenn3d.novals(c(10, 10, 10, 10, 5, 1, 57),
labels = c('Prime*Attitude', 'Attitude', 'Prime'),
Colors = c('#144256', rep('White', 2), '#144256', rep('White', 3) ), printvals=F)
grid.newpage()
plotVenn3d.novals(c(10, 10, 10, 10, 5, 1, 57),
labels = c('Prime*Attitude', 'Attitude', 'Prime'),
Colors = c('#144256', rep('#88301B', 2), '#144256', rep('White', 3) ), printvals=F)
grid.newpage()
plotVenn3d.novals(c(10, 10, 10, 10, 5, 1, 57),
labels = c('Prime*Attitude', 'Attitude', 'Prime'),
Colors = c('#144256', rep('#88301B', 2), '#144256', '#88691B',
rep('White', 3) ), printvals=F)
plotVenn3d.novals(c(10, 10, 10, 10, 5, 1, 57),
labels = c('Prime*Attitude', 'Attitude', 'Prime'),
Colors = c('#144256', rep('#88301B', 2), '#144256', 'White',
'#88691B', 'White'), printvals=F)
options(contrasts)
options(contrasts)
contrasts
contrasts()
list(contrasts)
sr.rel.att.mess <- aov(vmessage ~ attitude * relprime, data=srp)
contrasts(sr.rel.att.mess)
contrasts(attitude)
contrasts(relprime)
contrasts(srp$relprime)
contrasts(sr.rel.att.mess)
contrasts(sr.rel.att.mess$contrasts)
sr.rel.att.mess$contrasts
a.sr<-Anova(sr.rel.att.mess, type=2)
library(car)
a.sr<-Anova(sr.rel.att.mess, type=2)
a.sr
plotVenn3d.novals(c(10, 10, 10, 10, 10, 10, 10),
labels = c('Prime*Attitude', 'Attitude', 'Prime'),
Colors = c('#144256', rep('White', 6)), printvals=F)
plotVenn3d.novals(c(10, 10, 10, 10, 10, 10, 10),
labels = c('Prime*Attitude', 'Attitude', 'Prime'),
Colors = c('#144256', rep('White', 2), rep('#144256', 3), 'White'),
printvals=F)
plotVenn3d.novals(c(10, 10, 10, 10, 10, 10, 10),
labels = c('Prime*Attitude', 'Attitude', 'Prime'),
Colors = c('#144256', rep('White', 3), rep('#144256', 2), 'White'),
printvals=F)
grid.newpage()
plotVenn3d.novals(c(10, 10, 10, 10, 10, 10, 10),
labels = c('Prime*Attitude', 'Attitude', 'Prime'),
Colors = c('#144256', rep('White', 2), rep('#144256', 3), 'White'),
printvals=F)
grid.newpage()
plotVenn3d.novals(c(10, 10, 10, 10, 10, 10, 10),
labels = c('Prime*Attitude', 'Attitude', 'Prime'),
Colors = c('#144256', rep('White', 2), '#144256', 'White', rep('#144256', 2)),
printvals=F)
plotVenn3d.novals(c(10, 10, 10, 10, 10, 10, 10),
labels = c('Prime*Attitude', 'Attitude', 'Prime'),
Colors = c('#144256', rep('White', 2), '#144256', '144256', rep('#144256', 2)),
printvals=F)
plotVenn3d.novals(c(10, 10, 10, 10, 10, 10, 10),
labels = c('Prime*Attitude', 'Attitude', 'Prime'),
Colors = c('#144256', rep('White', 2), '#144256', '#144256', rep('#144256', 2)),
printvals=F)
plotVenn3d.novals(c(10, 10, 10, 10, 10, 10, 10),
labels = c('Prime*Attitude', 'Attitude', 'Prime'),
Colors = c('#144256', rep('White', 2), rep('#144256', 3),
'White'),
printvals=F)
plotVenn3d.novals(c(10, 10, 10, 10, 10, 10, 10),
labels = c('Prime*Attitude', 'Attitude', 'Prime'),
Colors = c('#144256', rep('White', 2), rep('#144256', 2),
'White', '#144256'),
printvals=F)
plotVenn3d.novals(c(10, 10, 10, 10, 10, 10, 10),
labels = c('Prime*Attitude', 'Attitude', 'Prime'),
Colors = c('#144256', rep('#88301B', 2), rep('#144256', 2),
'White', '#144256')), printvals=F)
plotVenn3d.novals(c(10, 10, 10, 10, 10, 10, 10),
labels = c('Prime*Attitude', 'Attitude', 'Prime'),
Colors = c('#144256', rep('#88301B', 2), rep('#144256', 2),
'White', '#144256'), printvals=F)
plotVenn3d.novals(c(10, 10, 10, 10, 10, 10, 10),
labels = c('Prime*Attitude', 'Attitude', 'Prime'),
Colors = c('#144256', rep('#88301B', 2), '#144256', 'White',
'#88691B', 'White'), printvals=F)
plotVenn3d.novals(c(10, 10, 10, 10, 10, 10, 10),
labels = c('Prime*Attitude', 'Attitude', 'Prime'),
Colors = c('#144256', rep('#88301B', 2), rep('#144256', 2)
'#88691B', '#144256'), printvals=F)
plotVenn3d.novals(c(10, 10, 10, 10, 10, 10, 10),
labels = c('Prime*Attitude', 'Attitude', 'Prime'),
Colors = c('#144256', rep('#88301B', 2), rep('#144256', 2),
'#88691B', '#144256'), printvals=F)
