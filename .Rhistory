facet_wrap(~stereotyped)
plot<-ggplot(na.omit(df.melt), aes(x=variable, y=value, group=subjectnum, color=interventcond))
plot+geom_line()+
facet_wrap(~stereotyped)
plot<-ggplot(na.omit(df.melt), aes(x=variable, y=value, group=subjectnum))
plot+geom_line()+
facet_wrap(interventcond~stereotyped)
plot<-ggplot(na.omit(df.melt), aes(x=variable, y=value, group=subjectnum))
plot+geom_line()+
facet_grid(interventcond~stereotyped)
fullmodel <- lmer(value ~ testnum*steretyped*interventcond + (testnum|subjectnum), df.melt)
fullmodel <- lmer(value ~ testnum*stereotyped*interventcond + (testnum|subjectnum), df.melt)
fm2 <- update(fmullmodel, .~ testnum*stereotyped + testnum*interventcond + (testnum|subjectnum), df.melt)
fm2 <- update(fullmodel, .~ testnum*stereotyped + testnum*interventcond + (testnum|subjectnum), df.melt)
anova(fullmodel, fm2)
fm4 <- update(fullmodel, .~ testnum + stereotyped + interventcond (testnum | subjectnum), df.melt)
fm4 <- update(fullmodel, .~ testnum + stereotyped + interventcond + (testnum | subjectnum), df.melt)
anova(fullmodel, fm4)
plot(fullmodel)
plot(fm2)
plot(fm3)
plot(fm4)
plot(fm5)
fm4 <- update(fullmodel, .~ testnum + stereotyped + interventcond + (testnum | subjectnum), df.melt)
plot(fm4)
plot(fullmodel)
fullmodel
summary(fullmodel)
MCMCglmm(fullmodel)
mcmcsamp(fullmodel)
library(mcmcglmm)
library('mcmcglmm')
library('MCMCglmm')
install.packages('MCMCglmm')
?MCMCglmm
library(MCMCglmm)
MCMCglmm(fullmodel)
lme4
?lme4
version(lme4)
version()
r.version()
bootmer(fullmodel)
bootMer(fullmodel)
fun <- function(fit){return(fixef(fit))}
bootMer(fullmodel, fun)
help("simulate-mer")
?simulate-mer
?simulatemer
a<-bootMer(fullmodel, fun, sim=1000)
a<-bootMer(fullmodel, fun, nsim = 1000)
summary(a)
names(a)
a[1]
a[2]
summary(a[2])
hist(a[2])
hist(a[2]$t)
hist(a[3])
summary(a[3])
?runif
rnorm(25, 100, 10)
a <- rnorm(25, 100, 10)
sd(a)
sqrt((1/(25-1))*sum((a-mean(a))^2))
set.seed(42)
numsamples <- 10000
mean <- 100
sd <- 10
simulation <- function(mean, sd, n, numsamples) {
samples <- data.frame(mean.1=rep(0, numsamples),
stdev.1=rep(0, numsamples),
n.1=runif(numsamples, 15, 50),
mean.2=rep(0, numsamples),
stdev.2=rep(0, numsamples),
n.2=runif(numsamples, 15, 50))
for (i in 1:numsamples) {
sample1 = rnorm(n.1[i], mean, sd)
sample2 = rnorm(n.2[i], mean, sd)
mean.1[i] = mean(sample1)
mean.2[i] = mean(sample2)
stdev.1[i] = sd(sample1) #r uses the corrected version
stdev.2[i] = sd(sample2)
}
return(samples)
}
samples<-simulation(mean, sd, n, numsamples)
simulation <- function(mean, sd, numsamples) {
samples <- data.frame(mean.1=rep(0, numsamples),
stdev.1=rep(0, numsamples),
n.1=runif(numsamples, 15, 50),
mean.2=rep(0, numsamples),
stdev.2=rep(0, numsamples),
n.2=runif(numsamples, 15, 50))
for (i in 1:numsamples) {
sample1 = rnorm(n.1[i], mean, sd)
sample2 = rnorm(n.2[i], mean, sd)
mean.1[i] = mean(sample1)
mean.2[i] = mean(sample2)
stdev.1[i] = sd(sample1) #r uses the corrected version
stdev.2[i] = sd(sample2)
}
return(samples)
}
samples<-simulation(mean, sd, numsamples)
simulation <- function(mean, sd, numsamples) {
samples <- data.frame(mean.1=rep(0, numsamples),
stdev.1=rep(0, numsamples),
n.1=runif(numsamples, 15, 50),
mean.2=rep(0, numsamples),
stdev.2=rep(0, numsamples),
n.2=runif(numsamples, 15, 50))
for (i in 1:numsamples) {
sample1 = rnorm(samples$n.1[i], mean, sd)
sample2 = rnorm(samples$n.2[i], mean, sd)
samples$mean.1[i] = mean(sample1)
samples$mean.2[i] = mean(sample2)
samples$stdev.1[i] = sd(sample1) #r uses the corrected version
samples$stdev.2[i] = sd(sample2)
}
return(samples)
}
samples<-simulation(mean, sd, numsamples)
head(samples)
simulation <- function(mean, sd, numsamples) {
samples <- data.frame(mean.1=rep(0, numsamples),
stdev.1=rep(0, numsamples),
n.1=round(runif(numsamples, 15, 50)),
mean.2=rep(0, numsamples),
stdev.2=rep(0, numsamples),
n.2=round(runif(numsamples, 15, 50)))
for (i in 1:numsamples) {
sample1 = rnorm(samples$n.1[i], mean, sd)
sample2 = rnorm(samples$n.2[i], mean, sd)
samples$mean.1[i] = mean(sample1)
samples$mean.2[i] = mean(sample2)
samples$stdev.1[i] = sd(sample1) #r uses the corrected version
samples$stdev.2[i] = sd(sample2)
}
return(samples)
}
samples<-simulation(mean, sd, numsamples)
samples
head(samples)
samples$weighted.mean <- (samples$mean.1*samples$n.1 + samples$mean.2*samples$n.2)/(samples$n.1+samples$n.2)
head(samples)
weighted <- with(samples,
sqrt((n.1*stdev.1)+(n.2*stdev.2)+(n.1*(mean.1-weighted.mean)^2)+(n.2*(mean.2-weighted.mean)^2)/(n.1+n.2))
)
head(weighted)
weighted <- with(samples,
sqrt((n.1*stdev.1)+(n.2*stdev.2)+(n.1*((mean.1-weighted.mean)^2))+(n.2*((mean.2-weighted.mean)^2))/(n.1+n.2)))
head(weighted)
weighted <- with(samples,
sqrt((n.1*stdev.1)+(n.2*stdev.2)+(n.1*((mean.1-weighted.mean)))+(n.2*((mean.2-weighted.mean)))/(n.1+n.2)))
weighted
weighted <- with(samples,
sqrt((n.1*stdev.1)+(n.2*stdev.2)+(n.1*((mean.1-weighted.mean)^2))+(n.2*((mean.2-weighted.mean)^2))/(n.1+n.2)))
weighted
head(weighted)
plot <- ggplot(samples, aes(samples$calculation, samples$standard_deviation))
plot + geom_boxplot() +
ylab('Standard Deviation') + xlab('Calculation Method') +
theme_bw()
library(ggplot2)
plot <- ggplot(samples, aes(samples$calculation, samples$standard_deviation))
plot + geom_boxplot() +
ylab('Standard Deviation') + xlab('Calculation Method') +
theme_bw()
samples$weighted.sd <- with(samples,
sqrt((n.1*stdev.1)+(n.2*stdev.2)+(n.1*((mean.1-weighted.mean)^2))+(n.2*((mean.2-weighted.mean)^2))/(n.1+n.2)))
plot <- ggplot(samples, aes(samples$weighted.sd))
plot + geom_histogram() +
ylab('Count') + xlab('SD') +
theme_bw()
mean(samples$weighted.sd)
library(fishmethods)
install.packages('fishmethods')
?weighted.mean
weighted_mean <- weighted.mean(c(samples$mean.1, samples$mean.2), c(samples$n.1, samples$n.2))
head(weighted_mean)
weighted_mean
?apply
weighted_mean <- apply(samples, 1, function(x) weighted.mean(c(samples$mean.1, samples$mean.2), c(samples$n.1, samples$n.2))
)
weighted_mean
simulation <- function(mean, sd, numsamples) {
samples <- data.frame(mean.1=rep(0, numsamples),
stdev.1=rep(0, numsamples),
n.1=round(runif(numsamples, 15, 50)),
mean.2=rep(0, numsamples),
stdev.2=rep(0, numsamples),
n.2=round(runif(numsamples, 15, 50)),
weighted_mean=rep(0,numsamples))
for (i in 1:numsamples) {
sample1 = rnorm(samples$n.1[i], mean, sd)
sample2 = rnorm(samples$n.2[i], mean, sd)
samples$mean.1[i] = mean(sample1)
samples$mean.2[i] = mean(sample2)
samples$stdev.1[i] = sd(sample1) #r uses the corrected version
samples$stdev.2[i] = sd(sample2)
samples$weighted_mean = weighted.mean(c(samples$mean.1[i], samples$mean.2[i]), c(samples$n.1[i], samples$n.2[i]))
}
return(samples)
}
head(samples)
samples$weighted.sd <- with(samples,
sqrt((n.1*stdev.1)+(n.2*stdev.2)+(n.1*((mean.1-weighted_mean)^2))+(n.2*((mean.2-weighted_mean)^2))/(n.1+n.2)))
head(samples)
mean(weighted.sd)
mean(samples$weighted.sd)
samples$weighted.sd <- with(samples,
sqrt((n.1*stdev.1^2)+(n.2*stdev.2^2)+(n.1*((mean.1-weighted_mean)^2))+(n.2*((mean.2-weighted_mean)^2))/(n.1+n.2)))
head(samples)
samples$weighted.sd <- with(samples,
sqrt(((n.1*stdev.1^2)+(n.2*stdev.2^2)+(n.1*((mean.1-weighted_mean)^2))+(n.2*((mean.2-weighted_mean)^2)))/(n.1+n.2)))
head(samples)
plot <- ggplot(samples, aes(samples$weighted.sd))
plot + geom_histogram() +
ylab('Count') + xlab('SD') +
theme_bw()
mean(samples$weighted.sd)
samples$weighted.sd.corrected <- with(samples,
sqrt((((n.1-1)*stdev.1^2)+((n.2-1)*stdev.2^2)+(n.1*((mean.1-weighted_mean)^2))+(n.2*((mean.2-weighted_mean)^2)))/(n.1+n.2-1)))
head(samples)
mean(weighted.sd)
summary(samples)
samples$calculation <- 1:length(numsamples)
head(samples)
?seq
samples$calculation <- seq(1, length(numsamples))
head(samples)
numsamples
1:numsamples
samples$calculation <- 1:numsamples
head(samples)
runs<-melt(samples, id.vars = 'calculation')
library(reshape2)
runs<-melt(samples, id.vars = 'calculation')
head(runs)
runs<-melt(samples, id.vars = 'calculation', measure.vars = c('weighted.sd', 'weighted.sd.corrected'))
head(runs)
runs<-melt(samples, id.vars = 'calculation', measure.vars = c('weighted.sd', 'weighted.sd.corrected'))
names(runs)[c(2,3)] <- c('method', 'standard_deviation')
plot <- ggplot(runs, aes(runs$method, runs$standard_deviation,
fill=method))
plot + geom_boxplot() +
ylab('Standard Deviation') + xlab('Caclulation Method')
plot + geom_boxplot() +
ylab('Standard Deviation') + xlab('Caclulation Method') + theme_bw()
library(ggplot2)
library(reshape2)
set.seed(42)
numsamples <- 10000
mean <- 100
sd <- 10
simulation <- function(mean, sd, numsamples) {
samples <- data.frame(mean.1=rep(0, numsamples),
stdev.1=rep(0, numsamples),
n.1=round(runif(numsamples, 15, 50)),
mean.2=rep(0, numsamples),
stdev.2=rep(0, numsamples),
n.2=round(runif(numsamples, 15, 50)),
weighted_mean=rep(0,numsamples))
for (i in 1:numsamples) {
sample1 = rnorm(samples$n.1[i], mean, sd)
sample2 = rnorm(samples$n.2[i], mean, sd)
samples$mean.1[i] = mean(sample1)
samples$mean.2[i] = mean(sample2)
samples$stdev.1[i] = sd(sample1) #r uses the corrected version
samples$stdev.2[i] = sd(sample2)
samples$weighted_mean = weighted.mean(c(samples$mean.1[i], samples$mean.2[i]), c(samples$n.1[i], samples$n.2[i]))
}
return(samples)
}
library(ggplot2)
library(reshape2)
set.seed(42)
numsamples <- 10000
mean <- 100
sd <- 10
simulation <- function(mean, sd, numsamples) {
samples <- data.frame(mean.1=rep(0, numsamples),
stdev.1=rep(0, numsamples),
n.1=round(runif(numsamples, 15, 50)),
mean.2=rep(0, numsamples),
stdev.2=rep(0, numsamples),
n.2=round(runif(numsamples, 15, 50)),
weighted_mean=rep(0,numsamples))
for (i in 1:numsamples) {
sample1 = rnorm(samples$n.1[i], mean, sd)
sample2 = rnorm(samples$n.2[i], mean, sd)
samples$mean.1[i] = mean(sample1)
samples$mean.2[i] = mean(sample2)
samples$stdev.1[i] = sd(sample1) #r uses the corrected version
samples$stdev.2[i] = sd(sample2)
samples$weighted_mean = weighted.mean(c(samples$mean.1[i], samples$mean.2[i]), c(samples$n.1[i], samples$n.2[i]))
}
return(samples)
}
samples$weighted.sd <- with(samples,
sqrt(((n.1*stdev.1^2)+(n.2*stdev.2^2)+
(n.1*((mean.1-weighted_mean)^2))+
(n.2*((mean.2-weighted_mean)^2)))/
(n.1+n.2)))
plot <- ggplot(samples, aes(samples$weighted.sd))
plot + geom_histogram() +
ylab('Count') + xlab('SD') +
theme_bw()
samples$weighted.sd <- with(samples,
sqrt(((n.1*stdev.1^2)+(n.2*stdev.2^2)+
(n.1*((mean.1-weighted_mean)^2))+
(n.2*((mean.2-weighted_mean)^2)))/
(n.1+n.2)))
plot <- ggplot(samples, aes(samples$weighted.sd))
plot + geom_histogram() +
ylab('Count') + xlab('SD') +
theme_bw()
samples$weighted.sd.corrected <- with(samples,
sqrt((((n.1-1)*stdev.1^2)+((n.2-1)*stdev.2^2)+
(n.1*((mean.1-weighted_mean)^2))+
(n.2*((mean.2-weighted_mean)^2)))/
(n.1+n.2-1)))
samples$calculation <- 1:numsamples
runs<-melt(samples, id.vars = 'calculation', measure.vars = c('weighted.sd',
'weighted.sd.corrected'))
names(runs)[c(2,3)] <- c('method', 'standard_deviation')
plot <- ggplot(runs, aes(runs$method, runs$standard_deviation,
fill=method))
plot + geom_boxplot() +
ylab('Standard Deviation') + xlab('Caclulation Method') +
theme_bw() +
theme(legend.position='none')
library(ggplot2)
library(reshape2)
set.seed(42)
numsamples <- 10000
mean <- 100
sd <- 10
simulation <- function(mean, sd, numsamples) {
samples <- data.frame(mean.1=rep(0, numsamples),
stdev.1=rep(0, numsamples),
n.1=round(runif(numsamples, 15, 50)),
mean.2=rep(0, numsamples),
stdev.2=rep(0, numsamples),
n.2=round(runif(numsamples, 15, 50)),
weighted_mean=rep(0,numsamples))
for (i in 1:numsamples) {
sample1 = rnorm(samples$n.1[i], mean, sd)
sample2 = rnorm(samples$n.2[i], mean, sd)
samples$mean.1[i] = mean(sample1)
samples$mean.2[i] = mean(sample2)
samples$stdev.1[i] = sd(sample1) #r uses the corrected version
samples$stdev.2[i] = sd(sample2)
samples$weighted_mean = weighted.mean(c(samples$mean.1[i], samples$mean.2[i]), c(samples$n.1[i], samples$n.2[i]))
}
return(samples)
}
simulation
input <- commandArgs(trailingOnly = TRUE)
KnitPost <- function(input, base.url = "/") {
require(knitr)
opts_knit$set(base.url = base.url)
fig.path <- paste0("../figs/", sub(".Rmd$", "", basename(input)), "/")
opts_chunk$set(fig.path = fig.path)
opts_chunk$set(fig.cap = "center")
render_jekyll()
print(paste0("../_posts/", sub(".Rmd$", "", basename(input)), ".md"))
knit(input, output = paste0("../_posts/", sub(".Rmd$", "", basename(input)), ".md"), envir = parent.frame())
}
KnitPost(input)
KnitPost('pooling_sd_2.Rmd')
ls()
setwd("/Volumes/triddle/riddlet.github.io/_drafts/_knitr")
KnitPost('pooling_sd_2.Rmd')
?rename
setwd("/Volumes/triddle/Teaching/Grad stats sem/StatsWorkshop")
srp <- read.csv(file="SR.Past.Rel.12.10.14.csv")
srp <- read.csv(file="SR.Past.Rel.12.10.14.csv")
setwd("/Volumes/triddle/Teaching/Grad stats sem/StatsWorkshop")
srp <- read.csv(file="SR.Past.Rel.12.10.14.csv")
srp <- read.csv('..\Data\SR.Past.Rel.12.10.14.csv')
srp <- read.csv('../Data/SR.Past.Rel.12.10.14.csv')
setwd("/Volumes/triddle/Teaching/Grad stats sem/StatsWorkshop")
srp <- read.csv('../Data/SR.Past.Rel.12.10.14.csv')
srp <- read.csv('.../Data/SR.Past.Rel.12.10.14.csv')
srp <- read.csv('Data/SR.Past.Rel.12.10.14.csv')
srp <- read.csv('Data/SR.Past.Rel.12.10.14.csv')
#### EXCLUSIONS ####
#exclude 5 who copied the Michael text verbatim (exclcopied=1)
srp <- srp[ which(is.na(srp$exclcopied) == TRUE ), ]
#exclude 11 who used 'Michael' in their message (didn't follow directions) (exclmich=1)
srp <- srp[ which(is.na(srp$exclmich) == TRUE ), ]
####### COMPUTING VARIABLES ##########
attach(srp)
## rmq
srp$loc <- (rmq_1 + rmq_3 + rmq_4 + rmq_5 + rmq_8 + rmq_16 + rmq_21 + rmq_25 + rmq_28 + rmq_29 + (7-rmq_13) + (7-rmq_24))/12
srp$ass <- ((7-rmq_2) + rmq_6 + rmq_7 + rmq_9 + (7-rmq_10) + rmq_11 + rmq_15 + rmq_19 + rmq_20 + rmq_22 + (7-rmq_27) + rmq_30)/12
srp$locomassess = srp$loc-srp$ass
srp$prom = (6-rfq_1) + rfq_3 + rfq_7 + (6-rfq_9) + rfq_10 + (6-rfq_11)
srp$prev = (6-rfq_2) + (6-rfq_4) + rfq_5 + (6-rfq_6) + (6-rfq_8)
srp$prommprev = srp$prom-srp$prev
# closeness measure
srp$closeness <- (((8-close_1) + (8-close_2) + close_3 + close_4 + (8-close_5) + (8-close_6) + close_7 + close_8)/8)
# ntoBelong
srp$belong = ((6-NTB_1) + (6-NTB_3) + (6-NTB_7) + NTB_2 + NTB_4 + NTB_5 + NTB_6 + NTB_8 + NTB_9 + NTB_10)/10
# Relational Trust
srp$reltrust = (reltrust_1 + reltrust_2 + reltrust_3 + reltrust_4)/4
# Epistemic Trust
srp$epistrust = (epistrust_1 + epistrust_2 + epistrust_3 + epistrust_4)/4
# message trust
srp$messtrust = (messtrust_1 + messtrust_2 + messtrust_3 + messtrust_4)/4
# ECR
srp$anx = (ECR.S_2 + ECR.S_4 + ECR.S_6 + (8-ECR.S_8) + ECR.S_10 + ECR.S_12)
srp$avoid = ((8-ECR.S_1) + ECR.S_3 + (8-ECR.S_5) + ECR.S_7 + ECR.S_9 + ECR.S_11)
#SCS
srp$independence = (((8-SCS_1) + (8-SCS_2) + (8-SCS_3) + (8-SCS_4) + (8-SCS_5) + (8-SCS_6) + (8-SCS_7) + (8-SCS_8) + (8-SCS_9) + (8-SCS_10) + (8-SCS_11)+ (8-SCS_12)+ SCS_13+ SCS_14+ SCS_15+ SCS_16+ SCS_17+ SCS_18+ SCS_19+ SCS_20+ SCS_21+ SCS_22+ SCS_23+ SCS_24)/24)
detach(srp)
#F-Scale
srp$authority = (((srp$F.Scale_1) + (srp$F.Scale_2) + (srp$F.Scale_3) + (srp$F.Scale_4) + (srp$F.Scale_5) + (srp$F.Scale_6) + (srp$F.Scale_7) +
(srp$F.Scale_8) + (srp$F.Scale_9) + (srp$F.Scale_10) + (srp$F.Scale_11)+ (srp$F.Scale_12)+ srp$F.Scale_13+ srp$F.Scale_14 +
srp$F.Scale_15+ srp$F.Scale_16+ srp$F.Scale_17+ srp$F.Scale_18+ srp$F.Scale_19+ srp$F.Scale_20+ srp$F.Scale_21+ srp$F.Scale_22)/22)
#### RECODING ####
####renaming manipulations
#install.packages("reshape")
#library(reshape)
srp$DO.BR.FL_19
srp <- rename(srp, c(DO.BR.FL_19="relprime")) #dissolved=1, stable=2
library(reshape)
install.packages('reshape')
library(reshape)
srp <- rename(srp, c(DO.BR.FL_19="relprime")) #dissolved=1, stable=2
srp$DO.BR.FL_19
srp$relprime
srp <- rename(srp, c(DO.BR.FL_20="attitude")) #like=2, dislike=1
srp$relprimedum
srp$relprime
str(srp$relprime)
str(srp$attitude)
summary(srp$relprime)
# dummy coding manipulations
srp$relprimedum[srp$relprime == "Stable Relationship Priming"] <- 0
srp$relprimedum[srp$relprime == "Dissolved Relationship Priming"] <- 1
srp$attitudedum[srp$attitude == "Michael-Dislike"] <- 0
srp$attitudedum[srp$attitude == "Michael-Like"] <- 1
srlike <- subset(srp, attitudedum==1)
srdislike <- subset(srp, attitudedum==0)
srstable <- subset(srp, relprimedum==0)
srdissolve <- subset(srp, relprimedum==1)
library(ggplot2)
theme_set(theme_bw(base_size = 14)) #for all graphs to have bw background & same font size
ggplot(srlike, aes(x=vmessage)) +
geom_density()
ggplot(srdislike, aes(x=vmessage)) +
geom_density()
ggplot(srstable, aes(x=vmessage)) +
geom_density()
ggplot(srdissolve, aes(x=vmessage)) +
geom_density()
ggplot(srlike, aes(x=vrecall)) +
geom_density()
ggplot(srdislike, aes(x=vrecall)) +
geom_density()
ggplot(srstable, aes(x=vrecall)) +
geom_density()
ggplot(srdissolve, aes(x=vrecall)) +
geom_density()
plot <- ggplot(srp, aes(x=vmessage, color=relprime))
plot + geom_density()
plot <- ggplot(srp, aes(x=vrecall, color=relprime))
plot + geom_density()
plot <- ggplot(srp, aes(x=vmessage, color=attitude))
plot + geom_density()
plot <- ggplot(srp, aes(x=vrecall, color=attitude))
plot + geom_density()
table(srp$attitude, srp$relprime)
plot <- ggplot(srp, aes(x=vrecall, color=attitude))
plot + geom_density() + facet_wrap(.~relprime)
plot + geom_density() + facet_wrap(relprime)
plot <- ggplot(srp, aes(x=vrecall, color=attitude))
plot + geom_density() + facet_wrap(relprime)
plot <- ggplot(srp, aes(x=vrecall, color=attitude))
plot + geom_density() + facet_wrap(~relprime)
plot <- ggplot(srp, aes(x=vmessage, color=attitude))
plot + geom_density() + facet_wrap(~relprime)
srp$vmessage
table(srp$vmessage)
table(srp$vmessage, srp$attitude)
table(srp$vmessage, srp$attitude, relprime)
table(srp$vmessage, srp$attitude, srp$relprime)
plot <- ggplot(srp, aes(x=vmessage, y=vrecall))
plot + geom_point()
plot <- ggplot(srp, aes(x=vmessage, y=vrecall))
plot + geom_point(position=position_jitter())
plot <- ggplot(srp, aes(x=vmessage, y=vrecall))
plot + geom_point(position=position_jitter()) + facet_grid(attitude~relprime)
sr.att.mess <- aov(vmessage ~ attitudedum, data=srp)
summary(sr.att.mess) #main effect of attitude
sr.att.rec <- aov(vrecall ~ attitudedum, data=srp)
summary(sr.att.rec) #main effect of attitude
sr.rel.mess <- aov(vmessage ~ relprimedum, data=srp)
summary(sr.rel.mess) #ns
sr.rel.rec <- aov(vrecall ~ relprimedum, data=srp)
summary(sr.rel.rec) #ns
sr.rel.att.mess <- aov(vmessage ~ attitudedum * relprimedum, data=srp)
summary(sr.rel.att.mess) #main effect of attitude (interaction ns)
sr.rel.att.rec <- aov(vrecall ~ attitudedum * relprimedum, data=srp)
summary(sr.rel.att.rec) #main effect of attitude (interaction ns)
library(car)
Anova(src.rel.att.rec)
Anova(sr.rel.att.rec)
Anova(sr.rel.att.rec, type = 3)
